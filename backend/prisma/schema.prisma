// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  username   String
  email      String       @unique
  password   String
  avatar     String?
  randomCode String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  connectionsAsUser   Connection[] @relation("UserAsUser")
  connectionsAsFriend Connection[] @relation("UserAsFriend")

  activities Activity[]
  messages   Message[]
}

model Connection {
  id       Int @id @default(autoincrement())
  userId   Int
  friendId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("UserAsUser", fields: [userId], references: [id])
  friend User @relation("UserAsFriend", fields: [friendId], references: [id])

  message Message[]
}
model Message {
  id        Int      @id @default(autoincrement())
  connectionId Int
  userId     Int
  content    String
  createdAt  DateTime @default(now())

  connection Connection @relation(fields: [connectionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@index([connectionId])
}

model Activity {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  emoji       String
  createdAt   DateTime  @default(now())
  endAt       DateTime?
  userId      Int

  user   User    @relation(fields: [userId], references: [id])
  images Image[]

  @@index([userId])
}

model Image {
  id         Int      @id @default(autoincrement())
  imageUrl   String
  order      Int
  activityId Int
  createdAt  DateTime @default(now())

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@index([activityId])
}